install.packages("data.table")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(data.table)  #importing the library data.table
library(hflights)
setwd("~/Documents/R Tutorial/R_DataTables/R_Code")
library(hflights)
setwd("~/Documents/R Tutorial/R_DataTables/R_Code")
fread(hflights.csv)
setwd("~/Documents/R Tutorial/R_DataTables/R_Code")
fread(hflights.csv)
fread("hflights.csv")
view("hflights.csv")
data = fread("hflights.csv")
view(data)
data = fread("hflights.csv")
data
view(data)
data(hflights)
view(data)
head(data)
class(data)
view(data)
View(data)
View(data)
colnames(data)
data = as.data.table(data)  #it will change the type of data to data.table
data
class(data)
data_2 = data[1:3, c('AirTime','DepDelay')]
data_2
View(data_2)
data_2 = data[1:3, list('AirTime','DepDelay')]
View(data_2)
View(data)
View(data)
head(data[data$ArrDelay>=45, Origin])  #it will return the Origin where ArrDelay is greater than 45
head(data$ArrDelay>=45, Origin)
head(data[ArrDelay>=45, Origin])
head(data[!is.na(data$ArrDelay), ArrDelay])
head(data[is.na(data$ArrDelay), ArrDelay])
head(!data[is.na(data$ArrDelay), ArrDelay])
head(!data[is.na(data$ArrDelay), ArrDelay])
head(data[!is.na(data$ArrDelay), ArrDelay])
head(data[, na.omit(ArrDelay)])
head(data[, na.omit(ArrDelay)]) #it will return first six rows of ArrDelay where there is no NaN values (data.table way)
View(data)
##########################
#     Add new column     #
##########################
data_totalDelay = data[, total_delay:= ArrDelay+DepDelay]
data_totalDelay
View(data_totalDelay)
head(data_totalDelay[total_delay>=80, ],5)
##########################
#     Remove column      #
##########################
data_totalDelay[, total_delay:= NULL]
View(data_totalDelay)
##########################
#   Copy Entire Table    #
##########################
copied_table = copy(data_totalDelay)
class(copied_table)
##########################
#   Select last row      #
##########################
data[.N, ]
View(data_totalDelay)
#Mean arrival delay by month
data[, mean(na.omit(ArrDelay)), by = Month]
View(data_totalDelay)
View(data_totalDelay)
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit(ArrDelay+DepDelay))), N_Unique_Carrier = length(unique(UniqueCarrier)), by = Month]
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit(ArrDelay+DepDelay))), N_Unique_Carrier = length(unique(UniqueCarrier)), by = Month]
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit((ArrDelay+DepDelay)))), N_Unique_Carrier = length(unique(UniqueCarrier)), by = Month]
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit((ArrDelay+DepDelay))), N_Unique_Carrier = length(unique(UniqueCarrier))), by = Month]
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit((ArrDelay+DepDelay))), N_Unique_Carrier = length(unique(UniqueCarrier)), by = Month]
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit((ArrDelay+DepDelay))), N_Unique_Carrier = length(unique(UniqueCarrier))), by = Month]
View(meanDelayByMonth)
View(data_totalDelay)
meanDelayByMonth_sort = meanDelayByMonth(order(mean_Delay))
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(data.table)
data = fread("hflights.csv")
class(data)  #it will return the type of data which is data.frame
head(data)
colnames(data) #it will return the column names of data
data = as.data.table(data)  #it will change the type of data to data.table
class(data)
##########################
#     Data Selection     #
##########################
data_2 = data[1:3, c('AirTime','DepDelay')]  #it will give 1 to 3 rows and 'AirTime' and 'DepDelay' columns(A data frame way)
data_2 = data[1:3, list('AirTime','DepDelay')] #it will give 1 to 3 rows and 'AirTime' and 'DepDelay' columns(A data table way)
data_2 = data[1:3, .('AirTime','DepDelay')] #it will give 1 to 3 rows and 'AirTime' and 'DepDelay' columns(using dot operator)
##########################
#   Data filteration     #
##########################
head(data[data$ArrDelay>=45, Origin])  #it will return the Origin where ArrDelay is greater than 45 (data.frame way)
head(data[ArrDelay>=45, Origin]) #it will return the Origin where ArrDelay is greater than 45 (data.table way)
##########################
# remove/omit NA values  #
##########################
head(data[!is.na(data$ArrDelay), ArrDelay])  #it will return first six rows of ArrDelay where there is no NaN values (data.frame way)
head(data[, na.omit(ArrDelay)]) #it will return first six rows of ArrDelay where there is no NaN values (data.table way)
##########################
#     Add new column     #
##########################
data_totalDelay = data[, total_delay:= ArrDelay+DepDelay]
head(data_totalDelay[total_delay>=80, ],5)  #head() function by-default shows only 6 rows, but here we specified 5
##########################
#     Remove column      #
##########################
data_totalDelay[, total_delay:= NULL]  #it will remove total delay column
##########################
#   Copy Entire Table    #
##########################
copied_table = copy(data_totalDelay)
class(copied_table)
##########################
#   Select last row      #
##########################
data[.N, ]
#Mean arrival delay by month
data[, mean(na.omit(ArrDelay)), by = Month]
#Mean delay at unique carriers by month. It will calculate the mean_delay by Month and the length of uniqueCarrier by Month
meanDelayByMonth = data[,.(mean_delay=mean(na.omit((ArrDelay+DepDelay))), N_Unique_Carrier = length(unique(UniqueCarrier))), by = Month]
meanDelayByMonth_sort = meanDelayByMonth(order(mean_Delay))
meanDelayByMonth_sort = meanDelayByMonth[order(mean_Delay)]
View(meanDelayByMonth)
meanDelayByMonth_sort = meanDelayByMonth[order(mean_Delay)]
meanDelayByMonth_sort = meanDelayByMonth[order(mean_delay)]
View(copied_table)
View(meanDelayByMonth_sort)
meanDelayByMonth_sortDes = meanDelayByMonth[order(-mean_delay)]
View(meanDelayByMonth_sortDes)
##########################
#   left and right join  #
##########################
df1 = data.table(color = c("red", "green", "black"), num=1:3)
df2 = data.table(color = c("red", "green", "black"), size=c("small", "medium", "large"))
View(df1)
View(df2)
View(df1)
left_join = merge(df1, df2, by="color", all.x = True) #join df1 and df2 by a common column color by keeping all the
left_join = merge(df1, df2, by="color", all.x = TRUE) #join df1 and df2 by a common column color by keeping all the
View(left_join)
View(df1)
View(df2)
##########################
#   left and right join  #
##########################
df1 = data.table(color = c("red", "green", "black"), num=1:3)
df2 = data.table(color = c("red", "green", "orange"), size=c("small", "medium", "large"))
left_join = merge(df1, df2, by="color", all.x = TRUE) #join df1 and df2 by a common column color by keeping all the
View(df1)
View(df2)
View(left_join)
left_join = merge(df1, df2, by="color", all.df1 = TRUE) #join df1 and df2 by a common column color by keeping all the
View(left_join)
##########################
#   left and right join  #
##########################
df1 = data.table(color = c("red", "green", "black"), num=1:3)
df2 = data.table(color = c("red", "green", "orange"), size=c("small", "medium", "large"))
left_join = merge(df1, df2, by="color", all.df1 = TRUE) #join df1 and df2 by a common column color by keeping all the
right_join = merge(df1, df2, by="color", all.df2 = TRUE)
View(left_join)
View(left_join)
View(df2)
View(df1)
View(df1)
View(df2)
View(left_join)
View(right_join)
left_join <- merge(df1, df2, by="color", all.df1 = TRUE) #join df1 and df2 by a common column color by keeping all the
View(left_join)
View(left_join)
##########################
#   left and right join  #
##########################
df1 = data.table(color = c("red", "green", "black"), num=1:3)
df2 = data.table(color = c("red", "green", "orange"), size=c("small", "medium", "large"))
left_join = merge(df1, df2, by="color", all.df1 = TRUE) #join df1 and df2 by a common column color by keeping all the
right_join = merge(df1, df2, by="color", all.df2 = TRUE)
merge()
?merge()
View(left_join)
##########################
#   left and right join  #
##########################
df1 = data.table(color = c("red", "green", "black"), num=1:3)
df2 = data.table(color = c("red", "green", "orange"), size=c("small", "medium", "large"))
left_join = merge(df1, df2, by="color", all.x = TRUE) #join df1 and df2 by a common column color by keeping all the
right_join = merge(df1, df2, by="color", all.y = TRUE)
View(df2)
View(left_join)
View(right_join)
full_outer_join = merge(df1, df2, by="color", all = TRUE)
View(full_outer_join)
View(meanDelayByMonth_sort)
